[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analysis Results Datasets Onboarding",
    "section": "",
    "text": "Overview\nThe CDISC Analysis Results Data (ARD) Model is an emerging standard for encoding statistical analysis outcomes in a machine-readable format. Its primary objective is to streamline the processes of automation, ensuring reproducibility, promoting reusability, and enhancing traceability.\nThe {cards} R package offers a range of functions for ARD generation, from basic univariate summaries like means and tabulations to complex multivariable summaries encompassing regression models and statistical tests.\nThe package includes functionalities to represent results in various formats, including JSON and YAML. Thanks to its flexible structures, the {cards} package can be harnessed in diverse applications, such as generating tables for regulatory submissions and conducting quality control checks on existing tables. Furthermore, the {cards} ARD object can be accessed through a REST API, allowing writers to dynamically incorporate table results into reports.\nThe {cardx} package (extra cards) is a companion to {cards}, exporting more complex functions to generate ARD objects. While {cards} package has minimal dependencies, the {cardx} package will include additional suggested package dependencies.\nWhile {cards} calculates statistics and stores them in a structured object, it cannot present those results; this, however, is where the {gtsummary} package shines. The {gtsummary} package offers a modular framework to construct summary tables. It is the most widely used package for summary tables in the healthcare/pharmaceutical space, and won the American Statistical Association’s 2021 award for Innovation in Statistical Programming and Analytics. The {gtsummary} package is currently being refactored to utilize {cards} as its backend, which will allow users to both extract an ARD object from a {gtsummary} table and use an ARD object to construct a {gtsummary} table. The {cards} and {gtsummary} packages stand as robust and versatile tools, poised to assist in a multitude of analytical endeavors.\n {cards}\n {cardx}\n {gtsummary}\n\n\nPre-work\nBefore we meet to review the details, please complete the following:\n\nReview the full Analysis Results Standard, paying particular attention to the section on Analysis Results Data.\n\nCDISC webinar on the model: https://www.cdisc.org/events/webinar/analysis-results-standard-public-review\n\nReview the {gtsummary} package.\n\nCornell Seminar: https://www.youtube.com/watch?v=tANo9E1SYJE&t=5s\n\nUsing the {cards} package, create a single ARD object that contains all the statistics needed to construct the table below (including the statistics in the header).\n\nUse the cards::ADSL data set.\nUse cards::ard_continuous() and cards::ard_cateogrical() to calculate the statistics.\nUse cards::bind_ard() to combine the results into a single ARD object.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "09-gtsummary.html",
    "href": "09-gtsummary.html",
    "title": "{gtsummary} Overview",
    "section": "",
    "text": "Background\nThe {gtsummary} package was born from my previous team’s migration to R. I had written utilities in Stata to improve our reporting workflow, and due to the migration, I needed to provide R utilities.\nThe design of {gtsummary} comes from:\n\nMy experience publishing 250+ academic research manuscripts.\nServing as Statistical Editor for European Urology journal (highest-impact journal in the field).\nHaving authored the original reporting guidelines for European Urology. Guidelines that have subsequently adopted by 7 other academic journals.\n\n\nAnyway, I’ve spent a significant amount of time thinking about statistical reporting!\nThe {gtsummary} package has grown in scope immensely since the first internal version written for my team. It is now the most downloaded package for summary tables in the entire R ecosystem with hundreds of thousands of users.\nYears ago, when we first got 200 downloads in one month, I wrote a chron job to report the monthly downloads relative to other packages.\n\nThe implications of being a widely used package is that we must be extremely cautious and thoughtful about any breaking changes!\n\n\nFuture\nThe {cards} package does not present results and this is where the {gtsummary} package shines. The {gtsummary} package offers a modular framework to construct summary tables. The {gtsummary} package is the most widely used package for summary tables in the R ecosystem, and won the American Statistical Association’s 2021 award for Innovation in Statistical Programming and Analytics and it’s currently being refactored with a {cards} backend.\nAfter the update, ARDs will play two important roles in a {gtsummary}.\n\nAn ARD will be a byproduct of every {gtsummary} tables created.\nThe package will also support an ARD-first approach, ingesting the ARD and returning a {gtsummary} table.\n\n\n\n\n\n\n\nARD to Table\nThe graphic below illustrates quite generally the approach we’ll take converting an ARD object created with {cards} to a {gtsummary} table.\n\nbrdg_*(): Bridge functions take the ARD data frame and create the {gtsummary} table. Primarily, this involves creating the underlying .$table_body data frame that is printed as the table.\npier_*(): Piers support bridges, and these functions do the same by supporting bridge functions. For example, a tbl_summary() table generally is comprised of continuous, categorical, and dichotomous summaries. Each of these types has an associated pier_*() function to tidy those results, and these pier_*() functions are called by the tbl_summary() brdg_*() function.\n\nBoth the bridge and pier functions can be generalized to support other reporting needs. For example, brdg_summary() constructs the tbl_summary() output from the ARDs, and this will require only a small amount of generalization to support tbl_svysummary() and more.",
    "crumbs": [
      "gtsummary Overview"
    ]
  },
  {
    "objectID": "07-standalone-scripts.html",
    "href": "07-standalone-scripts.html",
    "title": "Standalone Scripts",
    "section": "",
    "text": "The package utilizes a few standalone scripts that are used across a few projects, including {cards}, {cardx}, and {gtsummary}. Some of these scripts make available shims for common tidyverse functions, so you can use the function without depending on the package. The \"checks\" script is a series of functions to check the argument values supplied by users, and provides informative error messages when the values are not valid. Do not make changes to these files directly: rather, update these files in their source location.\n\nimport-standalone-purrr.R: https://github.com/r-lib/rlang/blob/main/R/standalone-purrr.R\nimport-standalone-forcats.R https://github.com/ddsjoberg/standalone/blob/main/R/standalone-forcats.R\nimport-standalone-stringr.R https://github.com/ddsjoberg/standalone/blob/main/R/standalone-stringr.R\nimport-standalone-checks.R https://github.com/ddsjoberg/standalone/blob/main/R/standalone-checks.R\n\nAfter the update has been made, you can copy the file into the repo with\nusethis::use_standalone(\"r-lib/rlang\", file = \"purrr\")\nusethis::use_standalone(\"ddsjoberg/standalone\", file = \"forcats\")\nusethis::use_standalone(\"ddsjoberg/standalone\", file = \"stringr\")\nusethis::use_standalone(\"ddsjoberg/standalone\", file = \"checks\")",
    "crumbs": [
      "Standalone Scripts"
    ]
  },
  {
    "objectID": "05-cli-conditions.html",
    "href": "05-cli-conditions.html",
    "title": "Error Messaging",
    "section": "",
    "text": "Slides from Hadley Wickham’s Masterclass for R Package Development\nUnable to display PDF file. Download instead.\nR script for slides\n\nTesting Error Messages\nThere are various ways to check appropriate error messaging, and snapshot testing is my favorite. This ensures the exact error you’re planning for is the one returned.\nexpect_snapshot(\n  error = TRUE, \n  &lt;expr&gt;\n)\n\n\nNote about the future\nWe have a somewhat complex messaging situation. {cards} functions are going to be called from {cardx} and {gtsummary}: in these cases, we want the user to be messaged about the function they ran, even if the error is thrown from {cards}.\nIn the near future, we’ll be implementing something like this:\n# set this function at the top of a user-facing function\nset_cli_abort_call &lt;- function(env = rlang::caller_env()) {\n  if (getOption(\"cli_abort_call\") |&gt; is.null()) {\n    options(cli_abort_call = env)\n    withr::defer(expr = options(cli_abort_call = NULL), envir = env)\n  }\n  invisible()\n}\n\n# use this function in `cli_abort(call=get_cli_abort_call())`\nget_cli_abort_call &lt;- function() {\n  getOption(\"cli_abort_call\", default = parent.frame())\n}\n\n# function called by user\nuser_facing_function &lt;- function() {\n  set_cli_abort_call()\n  check_for_errors()\n}\n\n# an internal function OR exported function from another pkg that throws the error\ncheck_for_errors &lt;- function() {\n  cli::cli_abort(c(\"!\" = \"This is an error!\", \"i\" = \"Be better\"), call = get_cli_abort_call())\n}\n\n# this exhibits the user experience\nuser_facing_function()\n#&gt; Error in `user_facing_function()`:\n#&gt; ! This is an error!\n#&gt; ℹ Be better\n\n# check the default still work when no option is set\ncheck_for_errors()\n#&gt; Error in `check_for_errors()`:\n#&gt; ! This is an error!\n#&gt; ℹ Be better",
    "crumbs": [
      "Error Messaging"
    ]
  },
  {
    "objectID": "03-cards-examples.html",
    "href": "03-cards-examples.html",
    "title": "{cards} Overview",
    "section": "",
    "text": "At the heart of the ARS Model lies the Analysis Results Dataset, a standardized format for exchanging and storing analysis results. Imagine it as a neatly organized warehouse where all the crucial information from your clinical trial analysis resides, readily accessible and easy to interpret. The {cards} R package creates ARD from observed data sets, and provides utilities for working with these objects.",
    "crumbs": [
      "cards Overview"
    ]
  },
  {
    "objectID": "03-cards-examples.html#cards",
    "href": "03-cards-examples.html#cards",
    "title": "{cards} Overview",
    "section": "{cards}",
    "text": "{cards}\nThe simplest way to introduce the {cards} R package is with an example of its most basic functionality. In the example below, we are using the ADSL example data set that is included in the package and we are calculating basic summary statistics for continuous variables \"AGE\" and \"BMIBL\".\n\nlibrary(cards)\n\nADSL |&gt; \n  ard_continuous(by = ARM, variables = c(AGE, BMIBL))\n\n{cards} data frame: 48 x 10\n\n\n   group1 group1_level variable stat_name stat_label statistic\n1     ARM      Placebo      AGE         N          N        86\n2     ARM      Placebo      AGE      mean       Mean    75.209\n3     ARM      Placebo      AGE        sd         SD      8.59\n4     ARM      Placebo      AGE    median     Median        76\n5     ARM      Placebo      AGE       p25  25th Per…        69\n6     ARM      Placebo      AGE       p75  75th Per…        82\n7     ARM      Placebo      AGE       min        Min        52\n8     ARM      Placebo      AGE       max        Max        89\n9     ARM      Placebo    BMIBL         N          N        86\n10    ARM      Placebo    BMIBL      mean       Mean    23.636\n\n\nℹ 38 more rows\n\n\nℹ Use `print(n = ...)` to see more rows\n\n\nℹ 4 more variables: context, statistic_fmt_fn, warning, error\n\n\nA few items to note from this result:\n\nThe default statistics returned are N, Mean, Standard Deviation, Median, 25th and 75th percentiles, and the minimum and maximum: these can be modified to use any univariate statistic whether that function is user-defined or from another package.\nThese results are calculated by the treatment arm. There is, however, no requirement to include the ard_continuous(by) argument.\nAny unobserved levels of the by= column(s), whether that is unobserved combinations of the by= variables or unobserved factor levels, will appear in the returned ARD table.\nThe results are returned in a structured data frame common among all ard_*() functions.\n\nThere exists similar functionality for categorical data.\n\nard_categorical(ADSL, by = ARM, variables = AGEGR1)\n\n{cards} data frame: 27 x 11\n\n\n   group1 group1_level variable variable_level stat_name stat_label statistic\n1     ARM      Placebo   AGEGR1            &lt;65         n          n        14\n2     ARM      Placebo   AGEGR1            &lt;65         N          N        86\n3     ARM      Placebo   AGEGR1            &lt;65         p          %     0.163\n4     ARM    Xanomeli…   AGEGR1            &lt;65         n          n        11\n5     ARM    Xanomeli…   AGEGR1            &lt;65         N          N        84\n6     ARM    Xanomeli…   AGEGR1            &lt;65         p          %     0.131\n7     ARM    Xanomeli…   AGEGR1            &lt;65         n          n         8\n8     ARM    Xanomeli…   AGEGR1            &lt;65         N          N        84\n9     ARM    Xanomeli…   AGEGR1            &lt;65         p          %     0.095\n10    ARM      Placebo   AGEGR1            &gt;80         n          n        30\n\n\nℹ 17 more rows\n\n\nℹ Use `print(n = ...)` to see more rows\n\n\nℹ 4 more variables: context, statistic_fmt_fn, warning, error\n\n\nAs a result of the common structure between this result and the continuous variable summary above, these two data frames can be combined with bind_ard(). The bind_ard() function is similar to dplyr::bind_rows(), and includes a few structural checks found in our ARD data frames, e.g. if we combine two ARDs with duplicate statistics, the function will notify us that the ARD no longer contains unique statistics.\n\nOther Functions\nThe {cards} package also exports functions for tabulating hierarchical data–structures common for adverse event reporting, missing data, and attributes.\n\ncards::ard_hierarchical()\ncards::ard_hierarchical_count()\ncards::ard_missing()\ncards::ard_attributes()\n\nLastly, I wanted to mention the cards::ard_complex() continuous function. This function is similar to ard_continuous() with an important distinction: rather than performing strictly univariate summaries (e.g. mean(x), median(x)), the ard_complex() function uses summary functions that accept x (like ard_continuous() summary functions), the full data frame, and the data frame subset by the by/strata variables.\n\n\nError Messaging\nIt is common that errors or warnings may be return by functions performing these calculations. The {cards} package will continue to return a data frame of the expected structure. Where a statistic that could not be calculate would have appeared, we will now see a NULL value and the error will be captured and returned as text in the \"error\" column.\n\nmean_with_error &lt;- function(x) {\n  stop(\"There was an error calculating the mean.\")\n  mean(x)\n}\n\nard_with_error &lt;-\n  ard_continuous(\n    ADSL, \n    variables = AGE, \n    statistics = ~list(mean = mean_with_error)\n  )\nard_with_error\n\n{cards} data frame: 1 x 8\n\n\n  variable   context stat_name stat_label statistic     error\n1      AGE continuo…      mean       Mean      NULL There wa…\n\n\nℹ 2 more variables: statistic_fmt_fn, warning\n\n\nThe {cards} package exports many utilities for working with ARDs. The example below is a utility to print any errors or warnings that may have occurred while calculating the statistics.\n\nprint_ard_conditions(ard_with_error)\n\nThe following errors were returned while calculating statistics:\n✖ For variable `AGE` and \"mean\" statistic: There was an error calculating the\n  mean.",
    "crumbs": [
      "cards Overview"
    ]
  },
  {
    "objectID": "03-cards-examples.html#list-formula-syntax",
    "href": "03-cards-examples.html#list-formula-syntax",
    "title": "{cards} Overview",
    "section": "List-Formula Syntax",
    "text": "List-Formula Syntax\nMany functions in {cards}, {cardx}, and {gtsummary} have arguments that accept a list-formula syntax, e.g. ard_continuous(statistics). The syntax is explained in detail here: https://insightsengineering.github.io/cards/reference/syntax.html\nBriefly, these arguments accept a few different structures that are processed into a named list using cards::process_formula_selectors(). The two most common are:\n\nNamed List: Named lists are returned as they were passed, unaltered.\nList of Formulas: This may look something like, list(everything() ~ '&lt;value&gt;') or list(AGE ~ 'value', starts_with(\"BM\") ~ 'value'). Everything on the LHS of the formula is processed with {tidyselect} and flattened to a named list.",
    "crumbs": [
      "cards Overview"
    ]
  },
  {
    "objectID": "01-plan.html",
    "href": "01-plan.html",
    "title": "Plan Overview",
    "section": "",
    "text": "We’ll be focusing on {cards}, {cardx}, and {gtsummary}\nThen we can move on to migrating other tern::s_*() functionality into {cardx}",
    "crumbs": [
      "Plan Overview"
    ]
  },
  {
    "objectID": "02-ard-overview.html",
    "href": "02-ard-overview.html",
    "title": "ARD Overview",
    "section": "",
    "text": "We all watched the video…what do you think?",
    "crumbs": [
      "ARD Overview"
    ]
  },
  {
    "objectID": "04-cards-internals.html",
    "href": "04-cards-internals.html",
    "title": "{cards} Internals",
    "section": "",
    "text": "Utilities for creating ARDs, everything listed under https://insightsengineering.github.io/cards/reference/index.html#construct-ards\n\nThe basic cards::ard_*() can also be used to construct bespoke ARDs of different flavors\n\nUtilities for working with ARDs, everything listed under https://insightsengineering.github.io/cards/reference/index.html#wrangle-ard",
    "crumbs": [
      "cards for Developers"
    ]
  },
  {
    "objectID": "06-helper-functions.html",
    "href": "06-helper-functions.html",
    "title": "Internal Utility Functions",
    "section": "",
    "text": "Internal Utility Functions\nFor non-exported utility functions, there are a few guidelines to follow:\n\nAll function names begin with a period, e.g. .nonexported_utility().\nAny function that does any non-trivial operation must be documented with roxygen comments.\n\n\n\nPull Request Template\n**What changes are proposed in this pull request?**\n* Style this entry in a way that can be copied directly into `NEWS.md`. (#&lt;issue number&gt;, @&lt;username&gt;)\n\nProvide more detail here as needed.\n\n**Reference GitHub issue associated with pull request.** _e.g., 'closes #&lt;issue number&gt;'_\n\n\n--------------------------------------------------------------------------------\n\nPre-review Checklist (if item does not apply, mark is as complete)\n- [ ] **All** GitHub Action workflows pass with a :white_check_mark:\n- [ ] PR branch has pulled the most recent updates from master branch: `usethis::pr_merge_main()`\n- [ ] If a bug was fixed, a unit test was added.\n- [ ] Code coverage is suitable for any new functions/features (generally, 100% coverage for new code): `devtools::test_coverage()`\n- [ ] Request a reviewer\n\nReviewer Checklist (if item does not apply, mark is as complete)\n\n- [ ] If a bug was fixed, a unit test was added.\n- [ ] Run `pkgdown::build_site()`. Check the R console for errors, and review the rendered website.\n- [ ] Code coverage is suitable for any new functions/features: `devtools::test_coverage()`\n\nWhen the branch is ready to be merged:\n- [ ] Update `NEWS.md` with the changes from this pull request under the heading \"`# cards (development version)`\". If there is an issue associated with the pull request, reference it in parentheses at the end update (see `NEWS.md` for examples).\n- [ ] **All** GitHub Action workflows pass with a :white_check_mark:\n- [ ] Approve Pull Request\n- [ ] Merge the PR. Please use \"Squash and merge\" or \"Rebase and merge\".",
    "crumbs": [
      "Helper Functions"
    ]
  },
  {
    "objectID": "08-cardx.html",
    "href": "08-cardx.html",
    "title": "{cardx} Overview",
    "section": "",
    "text": "The {cards} package exports many utilities for working with ARD objects. Additionally, {cards} exports utilities for creating new ard_*() functions. The {cardx} package takes advantage of this infrastructure, and exports many other functions for creating more complex ARD objects.\nUtilizing these utilities from {cards}, we can easily create a function to prepare the results from a t-test.\n\ncards::ADSL |&gt; \n  # keep two treatment arms for the t-test calculation\n  dplyr::filter(ARM %in% c(\"Placebo\", \"Xanomeline High Dose\")) |&gt; \n  cardx::ard_ttest(by = ARM, variable = AGE)\n\n{cards} data frame: 14 x 9\n\n\n   group1 variable context   stat_name stat_label statistic\n1     ARM      AGE   ttest    estimate  Mean Dif…     0.828\n2     ARM      AGE   ttest   estimate1  Group 1 …    75.209\n3     ARM      AGE   ttest   estimate2  Group 2 …    74.381\n4     ARM      AGE   ttest   statistic  t Statis…     0.655\n5     ARM      AGE   ttest     p.value    p-value     0.513\n6     ARM      AGE   ttest   parameter  Degrees …   167.362\n7     ARM      AGE   ttest    conf.low  CI Lower…    -1.668\n8     ARM      AGE   ttest   conf.high  CI Upper…     3.324\n9     ARM      AGE   ttest      method     method Welch Tw…\n10    ARM      AGE   ttest alternative  alternat… two.sided\n11    ARM      AGE   ttest          mu    H0 Mean         0\n12    ARM      AGE   ttest      paired  Paired t…     FALSE\n13    ARM      AGE   ttest   var.equal  Equal Va…     FALSE\n14    ARM      AGE   ttest  conf.level  CI Confi…      0.95\n\n\nℹ 3 more variables: statistic_fmt_fn, warning, error\n\n\nThe utilities allow us to return, not only the results of the t-test, but rows for each of the arguments. This allows us to both report the results, and also in a re-use case, know exactly how the results were calculated, e.g. assuming equal variances, the level of the confidence interval, etc.\nEssentially, every new ard_*() function we write, will be added to {cardx} rather than {cards}.\nFor our ARD work, we will take advantage of the {broom} package and we will use the naming conventions from {broom}. The {broom} package get 500K+ installs every month. With an enormous user base, we can be confident in the results.",
    "crumbs": [
      "cardx Overview"
    ]
  },
  {
    "objectID": "10-whats-next.html",
    "href": "10-whats-next.html",
    "title": "What’s Next?",
    "section": "",
    "text": "Priorities\n\nGet the {cards} R package in a place to make it’s first release. Focus on the GitHub issues tagged with v0.1.0 in the {cards} repo.\nAdd cardx::ard_*() functions to support the functionality currently available in {gtsummary}. Focus on the GitHub issues tagged with gtsummary in the {cardx} repo.\nFinalize the additional features we wish to include in {gtsummary}, and implement these features in the package.\nMigrate all existing {gtsummary} to the new structure, and make the {gtsummary} v2.0 release.\nAdd cardx::ard_*() functions to calculate the statistics needed in the TLG catalog.\nBuild templates using our workflow for each of the TLGs in our catalog.",
    "crumbs": [
      "What's Next?"
    ]
  }
]